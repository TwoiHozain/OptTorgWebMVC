// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using OptTorgWeb.Classes;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace OptTorgWebDB.Models;

public partial class Buys
{
    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long IdBuys { get; set; }
    
    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long ProductId { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long SupplierId { get; set; }
    
    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [Range(1, int.MaxValue, ErrorMessage = "Значение должно быть больше 0.")]
    [RegularExpression(@"^\d+$", ErrorMessage = "Допустимы только цифры.")]
    public int Count { get; set; }

    public bool Active { get; set; }

    public virtual Products Product { get; set; }

    public virtual ICollection<ProductPart> ProductPart { get; set; } = new List<ProductPart>();

    public virtual Suppliers Supplier { get; set; }

    public static List<Buys> GetAllBuys()
    {
        var db = new OptTorgDBContext();
        var p = db.Buys
            .Where(x => x.Active == true)
            .Include(x=> x.Product)
            .Include(x => x.Supplier);

        return p.ToList();
    }

    public static Buys GetNavData(Buys b)
    {
        var db = new OptTorgDBContext();
        b.Product = db.Products.Single(x => x.IdProduct == b.ProductId);
        b.Supplier = db.Suppliers.Single(x => x.IdSuppliers == b.SupplierId);

        return b;
    }

    public static void CreatrBuys(Buys p)
    {
        var db = new OptTorgDBContext();
        p.Active = true;
        p.Supplier = null;
        p.Product = null;
        db.Buys.Add(p);

        db.SaveChanges();
    }

    public static Buys GetBuysById(long id)
    {
        var db = new OptTorgDBContext();
        return db.Buys.Single(x => x.IdBuys == id);
    }

    public static Buys GetBuysByIdNavigation(long id)
    {
        var db = new OptTorgDBContext();
        var b = db.Buys
            .Include(x=> x.Supplier)  
            .Include(x=> x.Product)
            .Single(x => x.IdBuys == id);
       
            return b;
    }

    public static List<Buys> GetBuysForProductPart()
    {
        var db = new OptTorgDBContext();
        var p = db.Buys
            .Where(x => x.Active == true)
            .Include(x => x.Product)
            .Include(x => x.Supplier);

        //Посчитал суммарное количество товара в товарной части по закупкам
        var result = from pp in db.ProductPart
                     where pp.Active == true
                     group pp by pp.BuyId into g
                     select new ProductPart
                     {
                         BuyId = g.First().BuyId,
                         Count = g.Sum(x => x.Count),
                     };

        List<ProductPart> prPartRes = result.ToList();

        //Выбрал начатые закупки
        List<long> prPartResIdBuy = prPartRes.Select(x=>x.BuyId).ToList();
        List<Buys> startedBuys = db.Buys.Where(x => x.Active == true).Where(x=> prPartResIdBuy.Contains(x.IdBuys)).ToList();

        //Из начатых выбрал законченные
        var endedBuysId = from r in prPartRes
                          join sb in startedBuys on r.BuyId equals sb.IdBuys
                          where sb.Count <= r.Count
                          select sb.IdBuys;
        
        endedBuysId = endedBuysId.ToList();

        var allBuysId = p.Select(x => x.IdBuys).ToList();
        var res = allBuysId.Except(endedBuysId);

        return p.Where(x => res.Contains(x.IdBuys)).ToList();
    }

    public static int GetBuysProductCount(long idBuy)
    {
        var db = new OptTorgDBContext();
        if (db.Buys.FirstOrDefault(x => x.IdBuys == idBuy) == null)
            return 0;

        var result = from pp in db.ProductPart
                     where pp.Active == true && pp.BuyId == idBuy
                     select pp.Count;

        return result.Sum();
    }

    public static void UpdateBuys(Buys p)
    {
        var db = new OptTorgDBContext();
        p.Active = true;

        db.Buys.Update(p);

        db.SaveChanges();
    }

    public static void DeleteBuys(int id)
    {
        var db = new OptTorgDBContext();
        var pos = db.Buys.FirstOrDefault(x => x.IdBuys == id);
        pos.Active = false;

        db.SaveChanges();
    }

    public static void DCascade(int id)
    {
        var db = new OptTorgDBContext();
        var strg = db.Buys.FirstOrDefault(x => x.IdBuys == id);

        db.Remove(strg);
        db.SaveChanges();
    }
}