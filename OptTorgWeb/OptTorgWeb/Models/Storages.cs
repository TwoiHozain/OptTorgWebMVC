// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.DotNet.Scaffolding.Shared.Messaging;
using Newtonsoft.Json;
using OptTorgWeb.Classes;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace OptTorgWebDB.Models;

public partial class Storages
{
    public long IdStorages { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [RegularExpression(@"^ул\. [А-Яа-яЁёA-Za-z\s\-]+, (д\.|корп\.) [А-Яа-яЁёA-Za-z0-9]+(, (д\.|корп\.) [А-Яа-яЁёA-Za-z0-9]+)?$",ErrorMessage = ErrorMessages.WrongAdressFormat)]
    public string Adress { get; set; }
    
    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [RegularExpression(@"^[а-яА-Я]+$", ErrorMessage = ErrorMessages.OnlyRuLetters)]
    public string City { get; set; }
    
    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [RegularExpression(@"^[а-яА-Я]+$", ErrorMessage = ErrorMessages.OnlyRuLetters)]
    public string Oblast { get; set; }
    
    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [RegularExpression(@"^\d{6}$", ErrorMessage = ErrorMessages.WrongPostIndexFormat)]
    public string PostIndex { get; set; }
    
    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [RegularExpression(@"^[а-яА-Я]+$", ErrorMessage = ErrorMessages.OnlyRuLetters)]
    public string State { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [RegularExpression(@"^(\+7|8)[\s\-]?\(?\d{3}\)?[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}$",ErrorMessage = ErrorMessages.WrongPhoneFormat)]
    public string? Phone { get; set; }
    
    [RegularExpression(
        @"^(\+7|8)?[\s\-]?\(?\d{3,5}\)?[\s\-]?\d{1,3}[\s\-]?\d{2}[\s\-]?\d{2}$",
        ErrorMessage = ErrorMessages.WrongFaxFormat)]
    public int? Fax { get; set; }

    public bool Active { get; set; }

    public virtual ICollection<Delivery> Delivery { get; set; } = new List<Delivery>();

    public virtual ICollection<Sending> Sending { get; set; } = new List<Sending>();

    public virtual ICollection<StorageEmployees> StorageEmployees { get; set; } = new List<StorageEmployees>();
    
    public static List<Storages> GetAllStorages()
    {
        var db = new OptTorgDBContext();
        return db.Storages.Where(x => x.Active == true).ToList();
    }
    public static void CreatrStorages(Storages p)
    {
        var db = new OptTorgDBContext();
        p.Active = true;
        db.Storages.Add(p);
        db.SaveChanges();
    }
    public static Storages GetStoragesById(int id)
    {
        var db = new OptTorgDBContext();
        return db.Storages.Single(x => x.IdStorages == id);
    }
    public static void UpdateStorages(Storages p)
    {
        var db = new OptTorgDBContext();
        p.Active = true;
        db.Storages.Update(p);
        db.SaveChanges();
    }

    public static void DeleteStorages(int id)
    {
        var db = new OptTorgDBContext();
        var pos = db.Storages.FirstOrDefault(x => x.IdStorages == id);
        pos.Active = false;

        db.SaveChanges();
    }

    public static void DCascade(int id)
    {
        var db = new OptTorgDBContext();
        var strg = db.Storages.FirstOrDefault(x => x.IdStorages == id);
        
        db.Remove(strg);
        db.SaveChanges();
    }
}