// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using OptTorgWeb.Classes;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace OptTorgWebDB.Models;

public partial class Drivers
{
    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long IdDrivers { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long SeId { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [MinLength(3, ErrorMessage = "Введенное значение слишком короткое. Минимальная длинна - 3 символа")]
    [RegularExpression(@"^(?:\d{2}\s?\d{2}\s?\d{6,7}|\d{10,12})$",ErrorMessage = "Формат: 10 или 12 цифр в формате XX XX XXXXXX или XX XX XXXXXXX (отсутствие пробелов допускается)")]
    public string License { get; set; }

    public bool Active { get; set; }

    public virtual ICollection<Delivery> Delivery { get; set; } = new List<Delivery>();

    public virtual StorageEmployees SeNavigation { get; set; }

    public virtual ICollection<Sending> Sending { get; set; } = new List<Sending>();

    public static List<Drivers> GetAllDrivers()
    {
        var db = new OptTorgDBContext();
        var p = db.Drivers.Where(x => x.Active == true)
            .Include(x=> x.SeNavigation)
            .Include(x => x.SeNavigation.EmployeeNavigation)
            .Include(x => x.SeNavigation.EmployeeNavigation.Position)
            .Include(x => x.SeNavigation.StorageNavigation);

        return p.ToList();   
    }

    public static List<Drivers> GetStorageDrivers(long storageId)
    {
        var db = new OptTorgDBContext();
        var p = db.Drivers.Where(x => x.Active == true)
            .Include(x => x.SeNavigation.EmployeeNavigation.Position)
            .Include(x => x.SeNavigation.StorageNavigation)
            .Where(x=>x.SeNavigation.StorageId == storageId);

        return p.ToList();
    }

    public static void CreatrDrivers(Drivers p)
    {
        var db = new OptTorgDBContext();
        p.Active = true;
        db.Drivers.Add(p);

        db.SaveChanges();
    }
    
    public static Drivers GetDriversById(int id)
    {
        var db = new OptTorgDBContext();
        return db.Drivers.Include(x=>x.SeNavigation.EmployeeNavigation).Single(x => x.IdDrivers == id);
    }
    public static void UpdateDrivers(Drivers p)
    {
        var db = new OptTorgDBContext();
        p.Active = true;
        p.SeNavigation = null;

        db.Drivers.Update(p);

        db.SaveChanges();
    }
    public static void DeleteDrivers(int id) 
    { 
        var db = new OptTorgDBContext();
        var pos = db.Drivers.FirstOrDefault(x => x.IdDrivers == id);
        pos.Active = false;

        db.SaveChanges();
    }
    public static void DCascade(int id)
    {
        var db = new OptTorgDBContext();
        var strg = db.Drivers.FirstOrDefault(x => x.IdDrivers == id);

        db.Remove(strg);
        db.SaveChanges();
    }
}