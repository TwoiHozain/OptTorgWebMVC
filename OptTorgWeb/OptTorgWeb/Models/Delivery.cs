// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using OptTorgWeb.Classes;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace OptTorgWebDB.Models;

public partial class Delivery
{
    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long IdDelivery { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long EmployeeReceiveId { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long EmployeeAcceptId { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long StorageId { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long TransportId { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long StatusId { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long DriverId { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [MinLength(5, ErrorMessage = "Введенное значение слишком короткое. Минимальная длинна - 5 символов")]
    public string Osnovanie { get; set; }

    public bool Active { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public DateOnly Date { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [RegularExpression(@"^\d+$", ErrorMessage = "Допустимы только цифры.")]
    [MinLength(5, ErrorMessage = "Введенное значение слишком короткое. Минимальная длинна - 1 символ")]
    public string NomerDoverennosti { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [MinLength(5, ErrorMessage = "Введенное значение слишком короткое. Минимальная длинна - 5 символов")]
    public string DoverennostInfo { get; set; }

    public virtual Drivers Driver { get; set; }

    public virtual Employees EmployeeAccept { get; set; }

    public virtual Employees EmployeeReceive { get; set; }

    public virtual ICollection<ProductPart> ProductPart { get; set; } = new List<ProductPart>();

    public virtual DeliveryStatus Status { get; set; }

    public virtual Storages Storage { get; set; }

    public virtual Transport Transport { get; set; }

    public static List<Delivery> GetAllDelivery()
    {
        var db = new OptTorgDBContext();
        var p = db.Delivery
            .Where(x => x.Active == true)
            .Include(x=>x.EmployeeAccept)
            .Include(x => x.EmployeeReceive)
            .Include(x => x.Storage)
            .Include(x => x.Driver.SeNavigation.EmployeeNavigation)
            .Include(x => x.Transport)
            .Include(x => x.Status)
            .OrderBy(x => x.Status.Status)
            .ToList();

        return p.ToList();
    }

    public static Delivery GetDeliveryById(long id)
    {
        var db = new OptTorgDBContext();
        var p = db.Delivery
            .Include(x => x.EmployeeAccept.Position)
            .Include(x => x.EmployeeReceive.Position)
            .Include(x => x.Storage)
            .Include(x => x.Driver.SeNavigation.EmployeeNavigation)
            .Include(x => x.Transport)
            .Include(x => x.Status)
            .OrderBy(x => x.Status.Status)
            .Single(x => x.IdDelivery == id);

        return p;
    }

    public static List<Delivery> GetDeliveryForTorg12()
    {
        var db = new OptTorgDBContext();
        var p = db.Delivery
            .Include(x => x.EmployeeAccept.Position)
            .Include(x => x.EmployeeReceive.Position)
            .Include(x => x.Storage)
            .Include(x => x.Driver.SeNavigation.EmployeeNavigation)
            .Include(x => x.Transport)
            .Include(x => x.Status)
            .OrderBy(x => x.Status.Status)
            .Where(x => x.Status.IdDs !=5);

        return p.ToList();
    }

    public static List<Delivery> GetDeliveryForProductPart()
    {
        var db = new OptTorgDBContext();
        var p = db.Delivery
            .Where(x => x.Active == true)
            .Include(x => x.EmployeeAccept)
            .Include(x => x.EmployeeReceive)
            .Include(x => x.Storage)
            .Include(x => x.Driver.SeNavigation.EmployeeNavigation)
            .Include(x => x.Transport)
            .Include(x => x.Status)
            .Where(x=>x.Status.IdDs == 5)
            .ToList();

        var deliveryWeight = from pp in db.ProductPart
                     where pp.Active == true
                     join bus in db.Buys on pp.BuyId equals bus.IdBuys
                             join prod in db.Products on bus.ProductId equals prod.IdProduct
                     group pp by pp.DeliveryId into g
                     select new ProductPart
                     {
                         Delivery = new Delivery
                         {
                             IdDelivery = g.First().DeliveryId,
                             TransportId = g.First().Delivery.TransportId,
                         },

                         Buy = new Buys{
                             Product = new Products { MassPrutto = g.Sum(x => x.Count * x.Buy.Product.MassPrutto)}
                         },
                         DeliveryId = g.First().DeliveryId,
                     };

        var loadedDeliveryId = (from dw in deliveryWeight.ToList()
                                  join t in db.Transport on dw.Delivery.TransportId equals t.IdTransport
                                  where t.Active == true && ( dw.Buy.Product.MassPrutto/t.Tonnage >= 0.95)
                                  select dw.DeliveryId).ToList();

        var dId = db.Delivery.Select(x => x.IdDelivery).ToList();
        dId = dId.Except(loadedDeliveryId.ToList()).ToList();

        return p.Where(x=> dId.Contains(x.IdDelivery)).ToList();
    }

    public static double GetDeliveryWeight(long id)
    {
        var db = new OptTorgDBContext();

        //ToDo
        //Отсеить загруженные доставки
        var deliveryWeight = (from pp in db.ProductPart
                             where pp.Active == true && pp.DeliveryId==id
                             join bus in db.Buys on pp.BuyId equals bus.IdBuys
                             join prod in db.Products on bus.ProductId equals prod.IdProduct
                             select pp.Count * bus.Product.MassPrutto).Sum();

        return deliveryWeight;
    }

    public static void CreateDelivery(Delivery d)
    {
        var db = new OptTorgDBContext();
        d.Active = true;
        d.StatusId = 5;
        db.Delivery.Add(d);

        db.SaveChanges();
    }

    public static void UpdateDelivery(Delivery p)
    {
        var db = new OptTorgDBContext();
        p.Active = true;
        db.Delivery.Update(p);
       
        db.SaveChanges();
    }

    public static void DeleteDelivery(int id)
    {
        var db = new OptTorgDBContext();
        var d = db.Delivery.FirstOrDefault(x => x.IdDelivery == id);
        d.Active = false;

        db.SaveChanges();
    }
    public static void DCascade(int id)
    {
        var db = new OptTorgDBContext();
        var strg = db.Delivery.FirstOrDefault(x => x.IdDelivery == id);

        db.Remove(strg);
        db.SaveChanges();
    }
}