// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using OptTorgWeb.Classes;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace OptTorgWebDB.Models;

public partial class MeasureUnits
{
    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long IdMu { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [RegularExpression(@"^[а-яА-Я]+$", ErrorMessage = ErrorMessages.OnlyRuLetters)]
    public string Name { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [MinLength(1, ErrorMessage = "Введенное значение слишком короткое. Минимальная длинна - 1 символ")]
    public string UslovnoeObozn { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [RegularExpression(@"^\d+$", ErrorMessage = "Допустимы только цифры.")]
    [MinLength(1, ErrorMessage = "Введенное значение слишком короткое. Минимальная длинна - 1 символ")]
    public string OkeiCode { get; set; }

    public bool Active { get; set; }

    public virtual ICollection<Products> Products { get; set; } = new List<Products>();


    public static List<MeasureUnits> GetAllMeasureUnits()
    {
        var db = new OptTorgDBContext();
        return db.MeasureUnits.Where(x => x.Active == true).ToList();
    }
    public static void CreatrMeasureUnits(MeasureUnits p)
    {
        var db = new OptTorgDBContext();
        p.Active = true;
        db.MeasureUnits.Add(p);
        db.SaveChanges();
    }
    public static MeasureUnits GetMeasureUnitsById(int id)
    {
        var db = new OptTorgDBContext();
        return db.MeasureUnits.Single(x => x.IdMu == id);
    }
    public static void UpdateMeasureUnits(MeasureUnits p)
    {
        var db = new OptTorgDBContext();
        p.Active = true;
        db.MeasureUnits.Update(p);
        db.SaveChanges();
    }
    public static void DeleteMeasureUnits(int id)
    {
        var db = new OptTorgDBContext();
        var pos = db.MeasureUnits.FirstOrDefault(x => x.IdMu == id);
        pos.Active = false;

        db.SaveChanges();
    }
    
    public static void DCascade(int id)
    {
        var db = new OptTorgDBContext();
        var strg = db.MeasureUnits.FirstOrDefault(x => x.IdMu == id);

        db.Remove(strg);
        db.SaveChanges();
    }
}