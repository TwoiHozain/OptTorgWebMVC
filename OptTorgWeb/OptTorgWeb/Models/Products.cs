// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using OptTorgWeb.Classes;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace OptTorgWebDB.Models;

public partial class Products
{
    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long IdProduct { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long MuId { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long PackingId { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long SortId { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long CountryId { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public string ProductName { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [RegularExpression(@"^\d+$", ErrorMessage = "Допустимы только цифры.")]
    public string ProductCode { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public string ProductArticle { get; set; }

    public string Horactiristics { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [Range(1, int.MaxValue, ErrorMessage = "Значение должно быть больше 0.")]
    public int CountPerPlase { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [Range(0, double.MaxValue, ErrorMessage = "Значение должно быть больше или равно 0")]
    [RegularExpression(@"^-?\d+(\.\d+)?$", ErrorMessage = "Введите корректное число (разделитель - точка)")]
    public double MassPerPlase { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [Range(0, double.MaxValue, ErrorMessage = "Значение должно быть больше или равно 0")]
    [RegularExpression(@"^-?\d+(\.\d+)?$", ErrorMessage = "Введите корректное число (разделитель - точка)")]
    public double MassPrutto { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [Range(0, double.MaxValue, ErrorMessage = "Значение должно быть больше или равно 0")]
    [RegularExpression(@"^-?\d+(\.\d+)?$", ErrorMessage = "Введите корректное число (разделитель - точка)")]
    public double MassNetto { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public double PricePerPiece { get; set; }

    [Range(0, double.MaxValue, ErrorMessage = "Значение должно быть больше или равно 0")]
    [RegularExpression(@"^-?\d+(\.\d+)?$", ErrorMessage = "Введите корректное число (разделитель - точка)")]
    public double? PricePerPieceNoNds { get; set; }

    [Range(0, double.MaxValue, ErrorMessage = "Значение должно быть больше или равно 0")]
    [RegularExpression(@"^-?\d+(\.\d+)?$", ErrorMessage = "Введите корректное число (разделитель - точка)")]
    public double? Nds { get; set; }

    [Range(0, double.MaxValue, ErrorMessage = "Значение должно быть больше или равно 0")]
    [RegularExpression(@"^-?\d+(\.\d+)?$", ErrorMessage = "Введите корректное число (разделитель - точка)")]
    public double? TariffPerPiece { get; set; }

    [Range(0, double.MaxValue, ErrorMessage = "Значение должно быть больше или равно 0")]
    [RegularExpression(@"^-?\d+(\.\d+)?$", ErrorMessage = "Введите корректное число (разделитель - точка)")]
    public double? ExciseTaxe { get; set; }

    public bool Active { get; set; }

    public virtual ICollection<Buys> Buys { get; set; } = new List<Buys>();

    public virtual CountryOfProduct Country { get; set; }

    public virtual MeasureUnits Mu { get; set; }

    public virtual Packaging Packing { get; set; }

    public virtual ICollection<Sales> Sales { get; set; } = new List<Sales>();

    public virtual ProductSort Sort { get; set; }

    public static List<Products> GetAllProducts()
    {
        var db = new OptTorgDBContext();
        var p =db.Products
            .Include(x=>x.Sort)
            .Include(x => x.Country)
            .Include(x => x.Mu)
            .Include(x => x.Packing)
            .Where(x => x.Active == true).ToList();
        return p;
    }

    public static void CreatrProducts(Products p)
    {
        var db = new OptTorgDBContext();
        p.Active = true;

        db.Products.Add(p);
        db.SaveChanges();
    }

    public static Products GetProductsById(int id)
    {
        var db = new OptTorgDBContext();
        
        var p=db.Products.Include(x => x.Sort)
            .Include(x => x.Country)
            .Include(x => x.Mu)
            .Include(x => x.Packing).Single(x => x.IdProduct == id);

        return p;
    }

    public static Products GetProductsById(long id)
    {
        var db = new OptTorgDBContext();

        var p = db.Products
            .Include(x => x.Sort)
            .Include(x => x.Country)
            .Include(x => x.Mu)
            .Include(x => x.Packing).Single(x => x.IdProduct == id);

        return p;
    }

    public static void UpdateProducts(Products p)
    {
        var db = new OptTorgDBContext();
        p.Active = true;
        db.Products.Update(p);
        db.SaveChanges();
    }

    public static void DeleteProducts(int id)
    {
        var db = new OptTorgDBContext();
        var pos = db.Products.FirstOrDefault(x => x.IdProduct == id);
        pos.Active = false;

        db.SaveChanges();
    }
    
    public static List<Products> GetProductsForSale()
    {
        var db = new OptTorgDBContext();
        
        var prodId = db.Products.Select(x => x.IdProduct).ToList();

        var bought = from pp in db.ProductPart
                        join bus in db.Buys on pp.BuyId equals bus.IdBuys       
                     where pp.Delivery.StatusId != 5
                     group pp by pp.Buy.ProductId into g
                             select new Buys
                             {
                                 IdBuys = g.First().Buy.IdBuys,
                                 ProductId = g.First().Buy.ProductId,
                                 Count = g.Sum(x => x.Count),
                             };
        var boughtId = from bght in bought
                       select bght.ProductId;

        var sale = from sal in db.Sales
                        join prod in db.Products on sal.ProductId equals prod.IdProduct
                     group sal by sal.ProductId into g
                     select new Sales
                     {
                         IdSales = g.First().IdSales, 
                         ProductId = g.First().ProductId,
                         Count = g.Sum(x => x.Count),
                     };

        var soldOutId = from s in sale
                        join b in bought on s.ProductId equals b.ProductId
                        where b.Count - s.Count == 0
                        select s.ProductId;

        var inStockId = boughtId.Except(soldOutId).ToList();

        var p = db.Products
            .Include(x => x.Country)
            .Include(x => x.Mu)
            .Include(x => x.Packing)
            .Include(x=>x.Sort)
            .Where(x => inStockId.Contains(x.IdProduct))
            .ToList();

        return p;
    }

    public static int GetProductBalance(long prodId)
    {
        var db = new OptTorgDBContext();

        var bought = (from pp in db.ProductPart
                     join b in db.Buys on pp.BuyId equals b.IdBuys
                     join d in db.Delivery on pp.DeliveryId equals d.IdDelivery
                        where d.StatusId != 5 && b.ProductId == prodId
                     select pp.Count).Sum();

        var sale = (from sal in db.Sales 
                   where sal.ProductId == prodId
                   select sal.Count).Sum();

        return bought - sale;
    }
    public static void DCascade(int id)
    {
        var db = new OptTorgDBContext();
        var strg = db.Products.FirstOrDefault(x => x.IdProduct == id);

        db.Remove(strg);
        db.SaveChanges();
    }
}