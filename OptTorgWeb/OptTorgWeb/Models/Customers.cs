// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using OptTorgWeb.Classes;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace OptTorgWebDB.Models;

public partial class Customers
{
    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long IdCustomers { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public string Company { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [RegularExpression(@"^[а-яА-Я]+$", ErrorMessage = ErrorMessages.OnlyRuLetters)]
    public string Surname { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [RegularExpression(@"^[а-яА-Я]+$", ErrorMessage = ErrorMessages.OnlyRuLetters)]
    public string Name { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [RegularExpression(@"^[а-яА-Я]+$", ErrorMessage = ErrorMessages.OnlyRuLetters)]
    public string Patronomuc { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public string Position { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [RegularExpression(@"^ул\. [А-Яа-яЁёA-Za-z\s\-]+, (д\.|корп\.) [А-Яа-яЁёA-Za-z0-9]+(, (д\.|корп\.) [А-Яа-яЁёA-Za-z0-9]+)?$",ErrorMessage = ErrorMessages.WrongAdressFormat)]
    public string Adress { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [RegularExpression(@"^[а-яА-Я]+$", ErrorMessage = ErrorMessages.OnlyRuLetters)]
    public string City { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [RegularExpression(@"^[а-яА-Я]+$", ErrorMessage = ErrorMessages.OnlyRuLetters)]
    public string Oblast { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [RegularExpression(@"^\d{6}$", ErrorMessage = ErrorMessages.WrongPostIndexFormat)]
    public int PostIndex { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [RegularExpression(@"^[а-яА-Я]+$", ErrorMessage = ErrorMessages.OnlyRuLetters)]
    public string State { get; set; }

    public int? Fax { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [RegularExpression(@"^(\+7|8)[\s\-]?\(?\d{3}\)?[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}$",ErrorMessage = ErrorMessages.WrongPhoneFormat)]
    public string Phone { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [RegularExpression(@"^\d+$", ErrorMessage = "Допустимы только цифры.")]
    public int Inn { get; set; }

    public bool Active { get; set; }

    public string WebPage { get; set; }
    
    public virtual ICollection<Sales> Sales { get; set; } = new List<Sales>();

    public virtual ICollection<Sending> Sending { get; set; } = new List<Sending>();

    public static List<Customers> GetAllCustomers()
    {
        var db = new OptTorgDBContext();
        return db.Customers.Where(x => x.Active == true).ToList();
    }

    public static void CreatrCustomers(Customers p)
    {
        var db = new OptTorgDBContext();
        p.Active = true;
        db.Customers.Add(p);
        db.SaveChanges();
    }

    public static Customers GetCustomersById(int id)
    {
        var db = new OptTorgDBContext();
        return db.Customers.Single(x => x.IdCustomers == id);
    }

    public static Customers GetCustomersById(long id)
    {
        var db = new OptTorgDBContext();
        return db.Customers.FirstOrDefault(x => x.IdCustomers == id);
    }

    public static void UpdateCustomers(Customers p)
    {
        var db = new OptTorgDBContext();
        p.Active = true;
        db.Customers.Update(p);
        db.SaveChanges();
    }

    public static void DeleteCustomers(int id)
    {
        var db = new OptTorgDBContext();
        var pos = db.Customers.FirstOrDefault(x => x.IdCustomers == id);
        pos.Active = false;

        db.SaveChanges();
    }
    public static void DCascade(int id)
    {
        var db = new OptTorgDBContext();
        var strg = db.Customers.FirstOrDefault(x => x.IdCustomers == id);

        db.Remove(strg);
        db.SaveChanges();
    }
}