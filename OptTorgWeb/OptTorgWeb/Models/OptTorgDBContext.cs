// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace OptTorgWebDB.Models;

public partial class OptTorgDBContext : DbContext
{
    public OptTorgDBContext()
    {
    }

    public OptTorgDBContext(DbContextOptions<OptTorgDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Buys> Buys { get; set; }

    public virtual DbSet<CargoInfo> CargoInfo { get; set; }

    public virtual DbSet<CountryOfProduct> CountryOfProduct { get; set; }

    public virtual DbSet<Customers> Customers { get; set; }

    public virtual DbSet<Delivery> Delivery { get; set; }

    public virtual DbSet<DeliveryStatus> DeliveryStatus { get; set; }

    public virtual DbSet<Drivers> Drivers { get; set; }

    public virtual DbSet<Employees> Employees { get; set; }

    public virtual DbSet<MeasureUnits> MeasureUnits { get; set; }

    public virtual DbSet<Packaging> Packaging { get; set; }

    public virtual DbSet<Positions> Positions { get; set; }

    public virtual DbSet<Pricing> Pricing { get; set; }

    public virtual DbSet<ProductPart> ProductPart { get; set; }

    public virtual DbSet<ProductSort> ProductSort { get; set; }

    public virtual DbSet<Products> Products { get; set; }

    public virtual DbSet<Sales> Sales { get; set; }

    public virtual DbSet<Sending> Sending { get; set; }

    public virtual DbSet<SendingStatus> SendingStatus { get; set; }

    public virtual DbSet<StorageEmployees> StorageEmployees { get; set; }

    public virtual DbSet<Storages> Storages { get; set; }

    public virtual DbSet<Suppliers> Suppliers { get; set; }

    public virtual DbSet<Transport> Transport { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseNpgsql("Host=localhost;Database=OptTorgDB;Username=postgres;Password=Golubgolub;Persist Security Info=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Buys>(entity =>
        {
            entity.HasKey(e => e.IdBuys).HasName("buys_pkey");

            entity.ToTable("buys");

            entity.Property(e => e.IdBuys)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id_buys");
            entity.Property(e => e.Count).HasColumnName("count");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.SupplierId).HasColumnName("supplier_id");
            entity.Property(e => e.Active)
                .HasDefaultValue(true)
                .HasColumnName("active");

            entity.HasOne(d => d.Product).WithMany(p => p.Buys)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("product_fkey");

            entity.HasOne(d => d.Supplier).WithMany(p => p.Buys)
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("supplier_fkey");
        });

        modelBuilder.Entity<CargoInfo>(entity =>
        {
            entity.HasKey(e => e.IdCargoInfo).HasName("cargo_info_pkey");

            entity.ToTable("cargo_info");

            entity.Property(e => e.IdCargoInfo)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id_cargo_info");
            entity.Property(e => e.Count).HasColumnName("count");
            entity.Property(e => e.SaleId).HasColumnName("sale_id");
            entity.Property(e => e.SendingId).HasColumnName("sending_id");

            entity.HasOne(d => d.Sale).WithMany(p => p.CargoInfo)
                .HasForeignKey(d => d.SaleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("sale_fkey");

            entity.HasOne(d => d.Sending).WithMany(p => p.CargoInfo)
                .HasForeignKey(d => d.SendingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("sendink_fkey");
        });

        modelBuilder.Entity<CountryOfProduct>(entity =>
        {
            entity.HasKey(e => e.IdCof).HasName("country_of_product_pkey");

            entity.ToTable("country_of_product");

            entity.Property(e => e.IdCof)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id_cof");
            entity.Property(e => e.Active)
                .HasDefaultValue(true)
                .HasColumnName("active");
            entity.Property(e => e.NumericCode)
                .IsRequired()
                .HasColumnName("numeric_code");
            entity.Property(e => e.ShortName)
                .IsRequired()
                .HasColumnName("short_name");
        });

        modelBuilder.Entity<Customers>(entity =>
        {
            entity.HasKey(e => e.IdCustomers).HasName("customers_pkey");

            entity.ToTable("customers");

            entity.Property(e => e.IdCustomers)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id_customers");
            entity.Property(e => e.Adress)
                .IsRequired()
                .HasColumnName("adress");
            entity.Property(e => e.City)
                .IsRequired()
                .HasColumnName("city");
            entity.Property(e => e.Company)
                .IsRequired()
                .HasColumnName("company");
            entity.Property(e => e.Fax).HasColumnName("fax");
            entity.Property(e => e.Inn).HasColumnName("inn");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasColumnName("name");
            entity.Property(e => e.Oblast)
                .IsRequired()
                .HasColumnName("oblast");
            entity.Property(e => e.Patronomuc).HasColumnName("patronomuc");
            entity.Property(e => e.Phone).HasColumnName("phone");
            entity.Property(e => e.Position)
                .IsRequired()
                .HasColumnName("position");
            entity.Property(e => e.PostIndex).HasColumnName("post_index");
            entity.Property(e => e.State)
                .IsRequired()
                .HasColumnName("state");
            entity.Property(e => e.Surname)
                .IsRequired()
                .HasColumnName("surname");
            entity.Property(e => e.Active)
                .HasDefaultValue(true)
                .HasColumnName("active");
            entity.Property(e => e.WebPage).HasColumnName("web_page");
        });

        modelBuilder.Entity<Delivery>(entity =>
        {
            entity.HasKey(e => e.IdDelivery).HasName("delivery_pkey");

            entity.ToTable("delivery");

            entity.Property(e => e.IdDelivery)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id_delivery");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.DriverId).HasColumnName("driver_id");
            entity.Property(e => e.EmployeeAcceptId).HasColumnName("employee_accept_id");
            entity.Property(e => e.EmployeeReceiveId).HasColumnName("employee_receive_id");
            entity.Property(e => e.NomerDoverennosti)
                .IsRequired()
                .HasColumnName("nomer_doverennosti");
            entity.Property(e => e.Osnovanie)
                .IsRequired()
                .HasColumnName("osnovanie");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StorageId).HasColumnName("storage_id");
            entity.Property(e => e.TransportId).HasColumnName("transport_id");
            entity.Property(e => e.Active)
                .HasDefaultValue(true)
                .HasColumnName("active");

            entity.HasOne(d => d.Driver).WithMany(p => p.Delivery)
                .HasForeignKey(d => d.DriverId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("driver_fkey");

            entity.HasOne(d => d.EmployeeAccept).WithMany(p => p.DeliveryEmployeeAccept)
                .HasForeignKey(d => d.EmployeeAcceptId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("employee_accept_fkey");

            entity.HasOne(d => d.EmployeeReceive).WithMany(p => p.DeliveryEmployeeReceive)
                .HasForeignKey(d => d.EmployeeReceiveId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("employee_recive_fkey");

            entity.HasOne(d => d.Status).WithMany(p => p.Delivery)
                .HasForeignKey(d => d.StatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("status_fkey");

            entity.HasOne(d => d.Storage).WithMany(p => p.Delivery)
                .HasForeignKey(d => d.StorageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("storage_fkey");

            entity.HasOne(d => d.Transport).WithMany(p => p.Delivery)
                .HasForeignKey(d => d.TransportId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("transport_fkey");
        });

        modelBuilder.Entity<DeliveryStatus>(entity =>
        {
            entity.HasKey(e => e.IdDs).HasName("delivery_status_pkey");

            entity.ToTable("delivery_status");

            entity.Property(e => e.IdDs)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id_ds");
            entity.Property(e => e.Active)
                .HasDefaultValue(true)
                .HasColumnName("active");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasColumnName("status");
        });

        modelBuilder.Entity<Drivers>(entity =>
        {
            entity.HasKey(e => e.IdDrivers).HasName("drivers_pkey");

            entity.ToTable("drivers");

            entity.Property(e => e.IdDrivers)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id_drivers");
            entity.Property(e => e.License)
                .IsRequired()
                .HasColumnName("license");
            entity.Property(e => e.SeId).HasColumnName("se_id");

            entity.HasOne(d => d.SeNavigation).WithMany(p => p.Drivers)
                .HasForeignKey(d => d.SeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("se_fkey");
            entity.Property(e => e.Active)
                .HasDefaultValue(true)
                .HasColumnName("active");
        });

        modelBuilder.Entity<Employees>(entity =>
        {
            entity.HasKey(e => e.IdEmployees).HasName("employees_pkey");

            entity.ToTable("employees");

            entity.Property(e => e.IdEmployees)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id_employees");
            entity.Property(e => e.Adress)
                .IsRequired()
                .HasColumnName("adress");
            entity.Property(e => e.BirthDate).HasColumnName("birth_date");
            entity.Property(e => e.City)
                .IsRequired()
                .HasColumnName("city");
            entity.Property(e => e.Email).HasColumnName("email");
            entity.Property(e => e.Inn).HasColumnName("inn");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasColumnName("name");
            entity.Property(e => e.Oblast)
                .IsRequired()
                .HasColumnName("oblast");
            entity.Property(e => e.PassWord)
                .IsRequired()
                .HasColumnName("pass_word");
            entity.Property(e => e.Patronomic).HasColumnName("patronomic");
            entity.Property(e => e.PositionId).HasColumnName("position_id");
            entity.Property(e => e.PostIndex).HasColumnName("post_index");
            entity.Property(e => e.State)
                .IsRequired()
                .HasColumnName("state");
            entity.Property(e => e.Surname)
                .IsRequired()
                .HasColumnName("surname");
            entity.Property(e => e.WorkPhone).HasColumnName("work_phone");

            entity.HasOne(d => d.Position).WithMany(p => p.Employees)
                .HasForeignKey(d => d.PositionId)
                .HasConstraintName("position_fkey");
            entity.Property(e => e.Active)
                .HasDefaultValue(true)
                .HasColumnName("active");
        });

        modelBuilder.Entity<MeasureUnits>(entity =>
        {
            entity.HasKey(e => e.IdMu).HasName("measure_units_pkey");

            entity.ToTable("measure_units");

            entity.Property(e => e.IdMu)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id_mu");
            entity.Property(e => e.Active)
                .HasDefaultValue(true)
                .HasColumnName("active");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasColumnName("name");
            entity.Property(e => e.OkeiCode)
                .IsRequired()
                .HasColumnName("OKEI_code");
            entity.Property(e => e.UslovnoeObozn)
                .IsRequired()
                .HasColumnName("uslovnoe_obozn");
        });

        modelBuilder.Entity<Packaging>(entity =>
        {
            entity.HasKey(e => e.IdPackaging).HasName("packaging_pkey");

            entity.ToTable("packaging");

            entity.Property(e => e.IdPackaging)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id_packaging");
            entity.Property(e => e.Active)
                .HasDefaultValue(true)
                .HasColumnName("active");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasColumnName("type");
        });

        modelBuilder.Entity<Positions>(entity =>
        {
            entity.HasKey(e => e.IdPositions).HasName("positions_pkey");

            entity.ToTable("positions");

            entity.Property(e => e.IdPositions)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id_positions");
            entity.Property(e => e.Active)
                .HasDefaultValue(true)
                .HasColumnName("active");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasColumnName("name");
        });

        modelBuilder.Entity<Pricing>(entity =>
        {
            entity.HasKey(e => e.IdPricing).HasName("pricing_pkey");

            entity.ToTable("pricing");

            entity.Property(e => e.IdPricing)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id_pricing");
            entity.Property(e => e.DowntimeLoading).HasColumnName("downtime_loading");
            entity.Property(e => e.DowntimeUnloading).HasColumnName("downtime_unloading");
            entity.Property(e => e.Expedirovanie).HasColumnName("expedirovanie");
            entity.Property(e => e.ForTonnes).HasColumnName("for_tonnes");
            entity.Property(e => e.ForTonnesKm).HasColumnName("for_tonnes_km");
            entity.Property(e => e.NedogruzAvto).HasColumnName("nedogruz_avto");
            entity.Property(e => e.Other).HasColumnName("other");
            entity.Property(e => e.PogruzRazgruz).HasColumnName("pogruz_razgruz");
            entity.Property(e => e.ZaSpecTransport).HasColumnName("za_spec_transport");
            entity.Property(e => e.ZaSrochnost).HasColumnName("za_srochnost");
            entity.Property(e => e.Active).HasDefaultValue(true).HasColumnName("active");
        });

        modelBuilder.Entity<ProductPart>(entity =>
        {
            entity.HasKey(e => e.IdPp).HasName("product_part_pkey");

            entity.ToTable("product_part");

            entity.Property(e => e.IdPp)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id_pp");
            entity.Property(e => e.BuyId).HasColumnName("buy_id");
            entity.Property(e => e.Count).HasColumnName("count");
            entity.Property(e => e.DeliveryId).HasColumnName("delivery_id");
            entity.Property(e => e.Active)
                .HasDefaultValue(true)
                .HasColumnName("active");

            entity.HasOne(d => d.Buy).WithMany(p => p.ProductPart)
                .HasForeignKey(d => d.BuyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("buy_fkey");

            entity.HasOne(d => d.Delivery).WithMany(p => p.ProductPart)
                .HasForeignKey(d => d.DeliveryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("delivery_fkey");
        });

        modelBuilder.Entity<ProductSort>(entity =>
        {
            entity.HasKey(e => e.IdPs).HasName("product_sort_pkey");

            entity.ToTable("product_sort");

            entity.Property(e => e.IdPs)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id_ps");
            entity.Property(e => e.Active)
                .HasDefaultValue(true)
                .HasColumnName("active");
            entity.Property(e => e.SortName)
                .IsRequired()
                .HasColumnName("sort_name");
        });

        modelBuilder.Entity<Products>(entity =>
        {
            entity.HasKey(e => e.IdProduct).HasName("products_pkey");

            entity.ToTable("products");

            entity.Property(e => e.IdProduct)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id_product");
            entity.Property(e => e.CountPerPlase).HasColumnName("count_per_plase");
            entity.Property(e => e.CountryId).HasColumnName("country_id");
            entity.Property(e => e.ExciseTaxe).HasColumnName("excise_taxe");
            entity.Property(e => e.Horactiristics)
                .HasColumnName("horactiristics");
            entity.Property(e => e.MassNetto).HasColumnName("mass_netto");
            entity.Property(e => e.MassPerPlase).HasColumnName("mass_per_plase");
            entity.Property(e => e.MassPrutto).HasColumnName("mass_prutto");
            entity.Property(e => e.MuId).HasColumnName("mu_id");
            entity.Property(e => e.Nds).HasColumnName("nds");
            entity.Property(e => e.PackingId).HasColumnName("packing_id");
            entity.Property(e => e.PricePerPiece).HasColumnName("price_per_piece");
            entity.Property(e => e.PricePerPieceNoNds).HasColumnName("price_per_piece_no_nds");
            entity.Property(e => e.ProductArticle)
                .IsRequired()
                .HasColumnName("product_article");
            entity.Property(e => e.ProductCode)
                .IsRequired()
                .HasColumnName("product_code");
            entity.Property(e => e.ProductName)
                .IsRequired()
                .HasColumnName("product_name");
            entity.Property(e => e.SortId).HasColumnName("sort_id");
            entity.Property(e => e.TariffPerPiece).HasColumnName("tariff_per_piece");
            entity.Property(e => e.Active)
                .HasDefaultValue(true)
                .HasColumnName("active");

            entity.HasOne(d => d.Country).WithMany(p => p.Products)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("country_fkey");

            entity.HasOne(d => d.Mu).WithMany(p => p.Products)
                .HasForeignKey(d => d.MuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("measure_units_fkey");

            entity.HasOne(d => d.Packing).WithMany(p => p.Products)
                .HasForeignKey(d => d.PackingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("packing_fkey");

            entity.HasOne(d => d.Sort).WithMany(p => p.Products)
                .HasForeignKey(d => d.SortId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("sort_fkey");
        });

        modelBuilder.Entity<Sales>(entity =>
        {
            entity.HasKey(e => e.IdSales).HasName("sales_pkey");

            entity.ToTable("sales");

            entity.Property(e => e.IdSales)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id_sales");
            entity.Property(e => e.Count).HasColumnName("count");
            entity.Property(e => e.ProductId).HasColumnName("product_id");

            entity.HasOne(d => d.Product).WithMany(p => p.Sales)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("product_fkey");
        });

        modelBuilder.Entity<Sending>(entity =>
        {
            entity.HasKey(e => e.IdSending).HasName("sending_pkey");

            entity.ToTable("sending");

            entity.Property(e => e.IdSending)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id_sending");
            entity.Property(e => e.CodExpedir).HasColumnName("cod_expedir");
            entity.Property(e => e.CustomerId).HasColumnName("customer_id");
            entity.Property(e => e.DataDoverenosti).HasColumnName("data_doverenosti");
            entity.Property(e => e.DateArrivalLoading).HasColumnName("date_arrival_loading");
            entity.Property(e => e.DateArrivalUnloading).HasColumnName("date_arrival_unloading");
            entity.Property(e => e.Distance1TypeRoad).HasColumnName("distance_1_type_road");
            entity.Property(e => e.Distance2TypeRoad).HasColumnName("distance_2_type_road");
            entity.Property(e => e.Distance3TypeRoad).HasColumnName("distance_3_type_road");
            entity.Property(e => e.DistanceInCity).HasColumnName("distance_in_city");
            entity.Property(e => e.DowntimeLoading)
                .HasColumnType("time with time zone")
                .HasColumnName("downtime_loading");
            entity.Property(e => e.DowntimeUnloading)
                .HasColumnType("time with time zone")
                .HasColumnName("downtime_unloading");
            entity.Property(e => e.DriverId).HasColumnName("driver_id");
            entity.Property(e => e.EmployeesId).HasColumnName("employees_id");
            entity.Property(e => e.Expedirovanie).HasColumnName("expedirovanie");
            entity.Property(e => e.ExtraOperLoading).HasColumnName("extra_oper_loading");
            entity.Property(e => e.ExtraOperUnloading).HasColumnName("extra_oper_unloading");
            entity.Property(e => e.MainTarriffs).HasColumnName("main_tarriffs");
            entity.Property(e => e.NomerDoverenosti).HasColumnName("nomer_doverenosti");
            entity.Property(e => e.OtherExtraPay).HasColumnName("other_extra_pay");
            entity.Property(e => e.PricingId).HasColumnName("pricing_id");
            entity.Property(e => e.RascenkaVoditelu).HasColumnName("rascenka_voditelu");
            entity.Property(e => e.SClientaZaUslugi).HasColumnName("s_clienta_za_uslugi");
            entity.Property(e => e.SeId).HasColumnName("se_id");
            entity.Property(e => e.Shtraph).HasColumnName("shtraph");
            entity.Property(e => e.SsId).HasColumnName("ss_id");
            entity.Property(e => e.StorageId).HasColumnName("storage_id");
            entity.Property(e => e.TimeExtraOperationsLoading)
                .HasColumnType("time with time zone")
                .HasColumnName("time_extra_operations_loading");
            entity.Property(e => e.TimeLoading)
                .HasColumnType("time with time zone")
                .HasColumnName("time_loading");
            entity.Property(e => e.TimeUnloading)
                .HasColumnType("time with time zone")
                .HasColumnName("time_unloading");
            entity.Property(e => e.TransportId).HasColumnName("transport_id");
            entity.Property(e => e.VoditeluZaUslugi).HasColumnName("voditelu_za_uslugi");
            entity.Property(e => e.ZaSpecTransport).HasColumnName("za_spec_transport");
            entity.Property(e => e.ZaSrochnost).HasColumnName("za_srochnost");

            entity.HasOne(d => d.Customer).WithMany(p => p.Sending)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("customer_fkey");

            entity.HasOne(d => d.Driver).WithMany(p => p.Sending)
                .HasForeignKey(d => d.DriverId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("driver_fkey");

            entity.HasOne(d => d.Employees).WithMany(p => p.Sending)
                .HasForeignKey(d => d.EmployeesId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("employees_fkey");

            entity.HasOne(d => d.Pricing).WithMany(p => p.Sending)
                .HasForeignKey(d => d.PricingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("pricing_fkey");

            entity.HasOne(d => d.Se).WithMany(p => p.Sending)
                .HasForeignKey(d => d.SeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("storage_employee_fkey");

            entity.HasOne(d => d.Ss).WithMany(p => p.Sending)
                .HasForeignKey(d => d.SsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("sending_status_fkey");

            entity.HasOne(d => d.Storage).WithMany(p => p.Sending)
                .HasForeignKey(d => d.StorageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("storage_fkey");

            entity.HasOne(d => d.Transport).WithMany(p => p.Sending)
                .HasForeignKey(d => d.TransportId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("transport_fkey");
        });

        modelBuilder.Entity<SendingStatus>(entity =>
        {
            entity.HasKey(e => e.IdSs).HasName("sending_status_pkey");

            entity.ToTable("sending_status");

            entity.Property(e => e.IdSs)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id_ss");
            entity.Property(e => e.Active)
                .HasDefaultValue(true)
                .HasColumnName("active");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasColumnName("status");
        });

        modelBuilder.Entity<StorageEmployees>(entity =>
        {
            entity.HasKey(e => e.IdSe).HasName("storage_employees_pkey");

            entity.ToTable("storage_employees");

            entity.Property(e => e.IdSe)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id_se");
            entity.Property(e => e.AdmissionDate).HasColumnName("admission_date");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.StorageId).HasColumnName("storage_id");
            entity.Property(e => e.Active)
                .HasDefaultValue(true)
                .HasColumnName("active");
            entity.HasOne(d => d.EmployeeNavigation).WithMany(p => p.StorageEmployeesNavigation)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("employee_fkey");

            entity.HasOne(d => d.StorageNavigation).WithMany(p => p.StorageEmployees)
                .HasForeignKey(d => d.StorageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("storage_fkey");
        });

        modelBuilder.Entity<Storages>(entity =>
        {
            entity.HasKey(e => e.IdStorages).HasName("storages_pkey");

            entity.ToTable("storages");

            entity.Property(e => e.IdStorages)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id_storages");
            entity.Property(e => e.Adress)
                .IsRequired()
                .HasColumnName("adress");
            entity.Property(e => e.City)
                .IsRequired()
                .HasColumnName("city");
            entity.Property(e => e.PostIndex)
                .IsRequired()
                .HasColumnName("post_index");
            entity.Property(e => e.Fax).HasColumnName("fax");
            entity.Property(e => e.Oblast)
                .IsRequired()
                .HasColumnName("oblast");
            entity.Property(e => e.Phone).HasColumnName("phone");
            entity.Property(e => e.State)
                .IsRequired()
                .HasColumnName("state");
            entity.Property(e => e.Active)
                .HasDefaultValue(true)
                .HasColumnName("active");
        });

        modelBuilder.Entity<Suppliers>(entity =>
        {
            entity.HasKey(e => e.IdSuppliers).HasName("suppliers_pkey");

            entity.ToTable("suppliers");

            entity.Property(e => e.IdSuppliers)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id_suppliers");
            entity.Property(e => e.Adress)
                .IsRequired()
                .HasColumnName("adress");
            entity.Property(e => e.City)
                .IsRequired()
                .HasColumnName("city");
            entity.Property(e => e.Company)
                .IsRequired()
                .HasColumnName("company");
            entity.Property(e => e.Fax).HasColumnName("fax");
            entity.Property(e => e.Inn).HasColumnName("inn");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasColumnName("name");
            entity.Property(e => e.Oblast)
                .IsRequired()
                .HasColumnName("oblast");
            entity.Property(e => e.Patronymic).HasColumnName("patronymic");
            entity.Property(e => e.Phone).HasColumnName("phone");
            entity.Property(e => e.Position)
                .IsRequired()
                .HasColumnName("position");
            entity.Property(e => e.PostIndex)
                .IsRequired()
                .HasColumnName("post_index");
            entity.Property(e => e.State)
                .IsRequired()
                .HasColumnName("state");
            entity.Property(e => e.Surname)
                .IsRequired()
                .HasColumnName("surname");
            entity.Property(e => e.WebPage).HasColumnName("web_page");
            entity.Property(e => e.Active)
                .HasDefaultValue(true)
                .HasColumnName("active");
        });

        modelBuilder.Entity<Transport>(entity =>
        {
            entity.HasKey(e => e.IdTransport).HasName("transport_pkey");

            entity.ToTable("transport");

            entity.Property(e => e.IdTransport)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id_transport");
            entity.Property(e => e.Active)
                .HasDefaultValue(true)
                .HasColumnName("active");
            entity.Property(e => e.GosNomer)
                .IsRequired()
                .HasColumnName("gos_nomer");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasColumnName("name");
            entity.Property(e => e.Tonnage).HasColumnName("tonnage");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}