// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;

namespace OptTorgWebDB.Models;

public partial class Employees
{
    public long IdEmployees { get; set; }

    public long? PositionId { get; set; }

    public string Surname { get; set; }

    public string Name { get; set; }

    public string Patronomic { get; set; }

    public DateOnly? BirthDate { get; set; }

    public string Adress { get; set; }

    public string City { get; set; }

    public string Oblast { get; set; }

    public int PostIndex { get; set; }

    public string State { get; set; }

    public string Email { get; set; }

    public string WorkPhone { get; set; }

    public int Inn { get; set; }

    public string PassWord { get; set; }

    public bool Active { get; set; }

    public virtual ICollection<Delivery> DeliveryEmployeeAccept { get; set; } = new List<Delivery>();

    public virtual ICollection<Delivery> DeliveryEmployeeReceive { get; set; } = new List<Delivery>();

    public virtual Positions Position { get; set; }

    public virtual ICollection<Sending> Sending { get; set; } = new List<Sending>();

    public virtual ICollection<StorageEmployees> StorageEmployeesNavigation { get; set; } = new List<StorageEmployees>();

    public static List<Employees> GetAllEmployees()
    {
        var db = new OptTorgDBContext();
        var p = db.Employees.Include(x =>x.Position);
        return p.Where(x => x.Active == true).ToList();
    }

    public static void CreatrEmployees(Employees p)
    {
        var db = new OptTorgDBContext();
        p.Active = true;
        db.Employees.Add(p);
        db.SaveChanges();
    }

    public static IEnumerable<Employees> GetNotAssignedStorageEmployees()
    {
        var db = new OptTorgDBContext();
        var p = db.Employees.Where(x => x.Active == true);
        
        var seempId = db.StorageEmployees.Select(x => x.EmployeeId).ToList();
        var empId = db.Employees.Select(x => x.IdEmployees).ToList();

        var notAssignedSe = empId.Except(seempId);

        return p.Where(x => notAssignedSe.Contains(x.IdEmployees)).Include(x => x.Position).ToList();
    }

    public static Employees GetEmployeesById(int id)
    {
        var db = new OptTorgDBContext();
        return db.Employees.Single(x => x.IdEmployees == id);
    }

    public static void UpdateEmployees(Employees p)
    {
        var db = new OptTorgDBContext();
        p.Active = true;
        db.Employees.Update(p);
        db.SaveChanges();
    }

    public static void DeleteEmployees(int id)
    {
        var db = new OptTorgDBContext();
        var pos = db.Employees.FirstOrDefault(x => x.IdEmployees == id);
        pos.Active = false;

        db.SaveChanges();
    }
}