// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using OptTorgWeb.Classes;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace OptTorgWebDB.Models;

public partial class Sales
{
    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long IdSales { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long ProductId { get; set; }
    
    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long CustomerId { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [Range(1, int.MaxValue, ErrorMessage = "Значение должно быть больше 0.")] 
    public int Count { get; set; }

    public bool Active { get; set; }

    public virtual ICollection<CargoInfo> CargoInfo { get; set; } = new List<CargoInfo>();

    public virtual Products Product { get; set; }
    
    public virtual Customers Customer { get; set; }

    public static List<Sales> GetAllSales()
    {
        var db = new OptTorgDBContext();
        var p = db.Sales
            .Where(x => x.Active == true)
            .Include(x => x.Product)
            .Include(x => x.Customer);

        return p.ToList();
    }
    
    public static List<Sales> GetAllCustomerSales(long id)
    {
        var db = new OptTorgDBContext();
        var p = db.Sales
            .Where(x => x.Active == true && x.CustomerId == id)
            .Include(x => x.Product)
            .Include(x => x.Customer);

        return p.ToList();
    }
    public static Sales GetNavData(Sales b)
    {
        var db = new OptTorgDBContext();
        b.Product = db.Products.Single(x => x.IdProduct == b.ProductId);
        b.Customer = db.Customers.Single(x => x.IdCustomers == b.CustomerId);

        return b;
    }

    public static void CreatrSales(Sales p)
    {
        var db = new OptTorgDBContext();
        p.Active = true;
        p.Customer = null;
        p.Product = null;
        db.Sales.Add(p);

        db.SaveChanges();
    }

    public static Sales GetSalesById(long id)
    {
        var db = new OptTorgDBContext();
        return db.Sales.Single(x => x.IdSales == id);
    }

    public static Sales GetSalesByIdNavigation(long id)
    {
        var db = new OptTorgDBContext();
        var b = db.Sales
            .Include(x => x.Customer)
            .Include(x => x.Product)
            .Single(x => x.IdSales == id);

        return b;
    }

    public static int GetSalesProductCount(long idBuy)
    {
        var db = new OptTorgDBContext();
        if (db.Sales.FirstOrDefault(x => x.IdSales == idBuy) == null)
            return 0;

        var result = from pp in db.CargoInfo
                     where /*pp.Active == true &&*/ pp.SaleId == idBuy
                     select pp.Count;

        return result.Sum();
    }

    public static Sales GetSalesNav(long idSale)
    {
        var db = new OptTorgDBContext();
        var b = db.Sales
            .Include(x => x.Customer)
            .Include(x => x.Product)
            .Single(x => x.IdSales == idSale);

        return b;
    }

    public static void UpdateSales(Sales p)
    {
        var db = new OptTorgDBContext();
        p.Active = true;

        db.Sales.Update(p);

        db.SaveChanges();
    }

    public static void DeleteSales(int id)
    {
        var db = new OptTorgDBContext();
        var pos = db.Sales.FirstOrDefault(x => x.IdSales == id);
        pos.Active = false;

        db.SaveChanges();
    }
    public static void DCascade(int id)
    {
        var db = new OptTorgDBContext();
        var strg = db.Sales.FirstOrDefault(x => x.IdSales == id);

        db.Remove(strg);
        db.SaveChanges();
    }
}