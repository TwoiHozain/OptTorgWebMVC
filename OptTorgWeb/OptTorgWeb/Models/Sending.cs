// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using OptTorgWeb.Classes;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace OptTorgWebDB.Models;

public partial class Sending
{
    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long IdSending { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long TransportId { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long StorageId { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long DriverId { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long GlavBuhId { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long SeOtpuskProizvelId { get; set; }
    
    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long SeOtpuskRazreshilId { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long PricingId { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long SsId { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public long CustomerId { get; set; }

    [Range(0, double.MaxValue, ErrorMessage = "Значение должно быть больше или равно 0")]
    [RegularExpression(@"^-?\d+(\.\d+)?$", ErrorMessage = "Введите корректное число (разделитель - точка)")]
    public double? ExtraOperLoading { get; set; }

    [Range(0, double.MaxValue, ErrorMessage = "Значение должно быть больше или равно 0")]
    [RegularExpression(@"^-?\d+(\.\d+)?$", ErrorMessage = "Введите корректное число (разделитель - точка)")]
    public double? ExtraOperUnloading { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public DateOnly? DateArrivalLoading { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public DateOnly? DateArrivalUnloading { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public DateTimeOffset? TimeExtraOperationsLoading { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [Range(0, double.MaxValue, ErrorMessage = "Значение должно быть больше или равно 0")]
    [RegularExpression(@"^-?\d+(\.\d+)?$", ErrorMessage = "Введите корректное число (разделитель - точка)")]
    public double? DistanceInCity { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [Range(0, double.MaxValue, ErrorMessage = "Значение должно быть больше или равно 0")]
    [RegularExpression(@"^-?\d+(\.\d+)?$", ErrorMessage = "Введите корректное число (разделитель - точка)")]
    public double? Distance1TypeRoad { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [Range(0, double.MaxValue, ErrorMessage = "Значение должно быть больше или равно 0")]
    [RegularExpression(@"^-?\d+(\.\d+)?$", ErrorMessage = "Введите корректное число (разделитель - точка)")]
    public double? Distance2TypeRoad { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [Range(0, double.MaxValue, ErrorMessage = "Значение должно быть больше или равно 0")]
    [RegularExpression(@"^-?\d+(\.\d+)?$", ErrorMessage = "Введите корректное число (разделитель - точка)")]
    public double? Distance3TypeRoad { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [Range(0, double.MaxValue, ErrorMessage = "Значение должно быть больше или равно 0")]
    [RegularExpression(@"^-?\d+(\.\d+)?$", ErrorMessage = "Введите корректное число (разделитель - точка)")]
    public string CodExpedir { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [Range(0, double.MaxValue, ErrorMessage = "Значение должно быть больше или равно 0")]
    [RegularExpression(@"^-?\d+(\.\d+)?$", ErrorMessage = "Введите корректное число (разделитель - точка)")]
    public double? SClientaZaUslugi { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [Range(0, double.MaxValue, ErrorMessage = "Значение должно быть больше или равно 0")]
    [RegularExpression(@"^-?\d+(\.\d+)?$", ErrorMessage = "Введите корректное число (разделитель - точка)")]
    public double? VoditeluZaUslugi { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [Range(0, double.MaxValue, ErrorMessage = "Значение должно быть больше или равно 0")]
    [RegularExpression(@"^-?\d+(\.\d+)?$", ErrorMessage = "Введите корректное число (разделитель - точка)")]
    public double? Shtraph { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [Range(0, double.MaxValue, ErrorMessage = "Значение должно быть больше или равно 0")]
    [RegularExpression(@"^-?\d+(\.\d+)?$", ErrorMessage = "Введите корректное число (разделитель - точка)")]
    public double? RascenkaVoditelu { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [Range(0, double.MaxValue, ErrorMessage = "Значение должно быть больше или равно 0")]
    [RegularExpression(@"^-?\d+(\.\d+)?$", ErrorMessage = "Введите корректное число (разделитель - точка)")]
    public double? MainTarriffs { get; set; }

    public bool Active { get; set; }

    public DateTimeOffset? TimeLoading { get; set; }

    public DateTimeOffset? TimeUnloading { get; set; }

    public DateTimeOffset? DowntimeLoading { get; set; }

    public DateTimeOffset? DowntimeUnloading { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [Range(0, double.MaxValue, ErrorMessage = "Значение должно быть больше или равно 0")]
    [RegularExpression(@"^-?\d+(\.\d+)?$", ErrorMessage = "Введите корректное число (разделитель - точка)")]
    public double? Expedirovanie { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [Range(0, double.MaxValue, ErrorMessage = "Значение должно быть больше или равно 0")]
    [RegularExpression(@"^-?\d+(\.\d+)?$", ErrorMessage = "Введите корректное число (разделитель - точка)")]
    public double? ZaSrochnost { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [Range(0, double.MaxValue, ErrorMessage = "Значение должно быть больше или равно 0")]
    [RegularExpression(@"^-?\d+(\.\d+)?$", ErrorMessage = "Введите корректное число (разделитель - точка)")]
    public double? ZaSpecTransport { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    [Range(0, double.MaxValue, ErrorMessage = "Значение должно быть больше или равно 0")]
    [RegularExpression(@"^-?\d+(\.\d+)?$", ErrorMessage = "Введите корректное число (разделитель - точка)")] 
    public double? OtherExtraPay { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public string NomerDoverenosti { get; set; }

    [Required(ErrorMessage = ErrorMessages.IsRequired)]
    public string DoverenostInfo { get; set; }

    public DateOnly? DataDoverenosti { get; set; }

    public virtual ICollection<CargoInfo> CargoInfo { get; set; } = new List<CargoInfo>();

    public virtual Customers Customer { get; set; }

    public virtual Drivers Driver { get; set; }

    public virtual Employees GlavBuh { get; set; }

    public virtual StorageEmployees SeOtpuskProizvel { get; set; }
    
    public virtual StorageEmployees SeOtpuskRazreshil { get; set; }

    public virtual Pricing Pricing { get; set; }

    public virtual SendingStatus Ss { get; set; }

    public virtual Storages Storage { get; set; }

    public virtual Transport Transport { get; set; }

    public static List<Sending> GetAllSendings()
    {
        var db = new OptTorgDBContext();
        var p = db.Sending
            .Where(x => x.Active == true)
            .Include(x => x.Ss)
            .Include(x => x.Customer)
            .Include(x => x.Transport)
            .Include(x => x.Pricing)
            .Include(x => x.SeOtpuskProizvel.EmployeeNavigation)
            .Include(x => x.Storage)
            .Include(x => x.Driver.SeNavigation.EmployeeNavigation)
            .Include(x => x.GlavBuh.Position)
            .ToList();

        return p.ToList();
    }

    public static List<Sending> GetAllCustomerSendings(long id)
    {
        var db = new OptTorgDBContext();
        var p = db.Sending
            .Where(x => x.Active == true && x.CustomerId==id)
            .Include(x => x.Ss)
            .Include(x => x.Customer)
            .Include(x => x.Transport)
            .Include(x => x.Pricing)
            .Include(x => x.SeOtpuskProizvel.EmployeeNavigation)
            .Include(x => x.Storage)
            .Include(x => x.Driver.SeNavigation.EmployeeNavigation)
            .Include(x => x.GlavBuh.Position)
            .ToList();

        return p.ToList();
    }

    public static List<Sending> GetCustomerSendingsFor1T(long id)
    {
        var db = new OptTorgDBContext();
        var p = db.Sending
            .Where(x => x.Active == true && x.CustomerId==id)
            .Include(x => x.Ss)
            .Include(x => x.Customer)
            .Include(x => x.Transport)
            .Include(x => x.Pricing)
            .Include(x => x.SeOtpuskProizvel.EmployeeNavigation)
            .Include(x => x.Storage)
            .Include(x => x.Driver.SeNavigation.EmployeeNavigation)
            .Include(x => x.GlavBuh.Position)
            .Where(x => x.SsId != 5)
            .ToList();

        return p.ToList();
    }

    public static List<Sending> GetSendingsFor1T()
    {
        var db = new OptTorgDBContext();
        var p = db.Sending
            .Where(x => x.Active == true)
            .Include(x => x.Ss)
            .Include(x => x.Customer)
            .Include(x => x.Transport)
            .Include(x => x.Pricing)
            .Include(x => x.SeOtpuskProizvel.EmployeeNavigation)
            .Include(x => x.Storage)
            .Include(x => x.Driver.SeNavigation.EmployeeNavigation)
            .Include(x => x.GlavBuh.Position)
            .Where(x=>x.SsId != 5)
            .ToList();

        return p.ToList();
    }

    public static List<Sending> GetSendingsVObrabotke()
    {
        var db = new OptTorgDBContext();
        var p = db.Sending
            .Where(x => x.Active == true && x.SsId == 5)
            .Include(x => x.Ss)
            .Include(x => x.Customer)
            .Include(x => x.Transport)
            .Include(x => x.Pricing)
            .Include(x => x.SeOtpuskProizvel.EmployeeNavigation)
            .Include(x => x.Storage)
            .Include(x => x.Driver.SeNavigation.EmployeeNavigation)
            .Include(x => x.GlavBuh.Position)
            .ToList();

        return p.ToList();
    }

    public static Transport GetSendingTransport(long idSending)
    {
        var db = new OptTorgDBContext();
        var p = db.Sending.Include(x => x.Transport).FirstOrDefault(x => x.IdSending == idSending);

        return p.Transport;
    }

    public static double GetSendingWeight(long id)
    {
        var db = new OptTorgDBContext();

        //ToDo
        //Отсеить загруженные доставки
        var deliveryWeight = (from ci in db.CargoInfo
                              where /*ci.Active == true &&*/ ci.SendingId == id
                              join sal in db.Sales on ci.SaleId equals sal.IdSales
                              join prod in db.Products on sal.ProductId equals prod.IdProduct
                              select ci.Count * sal.Product.MassPrutto).Sum();

        return deliveryWeight;
    }

    public static void CreateSending(Sending d)
    {
        var db = new OptTorgDBContext();
        d.Active = true;
        d.SsId = 5;
        db.Sending.Add(d);

        db.SaveChanges();
    }

    public static Sending GetSendingById(long id)
    {
        var db = new OptTorgDBContext();
        var p = db.Sending
            .Include(x => x.Transport)
            .Include(x => x.SeOtpuskProizvel.EmployeeNavigation.Position)
            .Include(x => x.SeOtpuskRazreshil.EmployeeNavigation.Position)
            .Include(x => x.Driver.SeNavigation.EmployeeNavigation.Position)
            .Include(x => x.GlavBuh.Position)
            .Include(x => x.Customer)
            .Include(x => x.Pricing)
            .Include(x => x.Storage)
            .Include(x => x.Ss)
            .FirstOrDefault(x => x.IdSending == id);

        return p;
    }

    public static void UpdateSendingsStatus(Sending d)
    {
        var db = new OptTorgDBContext();

        db.Sending.Where(x => x.IdSending == d.IdSending)
                    .ExecuteUpdateAsync(s => s
                        .SetProperty(p => p.SsId, d.SsId));
    }

    public static void UpdateSending(Sending d)
    {
        var db = new OptTorgDBContext();
        db.Sending.Update(d);

        db.SaveChanges();
    }

    public static void DeleteSending(long id)
    {
        var db = new OptTorgDBContext();
        var d = db.Sending.FirstOrDefault(x => x.IdSending == id);
        d.Active = false;

        db.SaveChanges();
    }

    public static void DCascade(int id)
    {
        var db = new OptTorgDBContext();
        var strg = db.Sending.FirstOrDefault(x => x.IdSending == id);

        db.Remove(strg);
        db.SaveChanges();
    }
}